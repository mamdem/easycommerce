import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class EmailVerificationGuard implements CanActivate {
  
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(): boolean {
    const currentUser = this.authService.getCurrentUser();
    
    console.log('üîç EmailVerificationGuard - Utilisateur actuel:', currentUser);
    
    // Si l'utilisateur n'est pas connect√©, rediriger vers la connexion
    if (!currentUser) {
      console.log('‚ùå Utilisateur non connect√©, redirection vers login');
      this.router.navigate(['/auth/login']);
      return false;
    }

    // Pour les connexions Google, l'email est automatiquement v√©rifi√©
    // Permettre l'acc√®s au dashboard m√™me si emailVerified est false
    // car cela peut √™tre un probl√®me de synchronisation avec Firebase
    if (currentUser.providerData && currentUser.providerData.length > 0) {
      console.log('üîç ProviderData trouv√©:', currentUser.providerData);
      const googleProvider = currentUser.providerData.find(provider => 
        provider.providerId === 'google.com'
      );
      
      if (googleProvider) {
        console.log('‚úÖ Utilisateur Google d√©tect√©, acc√®s autoris√© au dashboard');
        return true;
      }
    }

    console.log('üîç EmailVerified:', currentUser.emailVerified);
    
    // Si l'email n'est pas v√©rifi√© et que ce n'est pas un utilisateur Google,
    // rediriger vers la v√©rification
    if (!currentUser.emailVerified) {
      console.log('‚ùå Email non v√©rifi√©, redirection vers email-verification');
      this.router.navigate(['/auth/email-verification']);
      return false;
    }

    // Si l'email est v√©rifi√©, permettre l'acc√®s
    console.log('‚úÖ Email v√©rifi√©, acc√®s autoris√© au dashboard');
    return true;
  }
} 